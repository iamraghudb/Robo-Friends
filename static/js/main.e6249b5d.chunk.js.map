{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowX","border","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbJ,SAACC,GACR,OAEI,yBAAKC,UAAU,2DACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAoDC,IAAI,WAChE,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCeVC,EArBD,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACG,6BAGSA,EAAOC,KAAI,SAACC,EAAKC,GACzB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCEdO,EAdC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACI,yBAAKd,UAAU,QACf,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,EAPF,SAACnB,GACV,OACI,yBAAKoB,MAAO,CAACC,UAAU,SAASC,OAAO,oBAClCtB,EAAMuB,WCgBJC,E,YAlBX,WAAYxB,GAAO,IAAD,8BACd,4CAAMA,KACDyB,MAAM,CACPC,UAAS,GAHC,E,iFASdC,KAAKC,SAAS,CAACF,UAAS,M,+BAGxB,OAAGC,KAAKF,MAAMC,SACH,0DAEJC,KAAK3B,MAAMuB,a,GAhBEM,aC+CbC,G,kBAtCX,aAAc,IAAD,8BACT,+CAeJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACd,YAAYkB,EAAMC,OAAOC,SAfxC,EAAKT,MAAM,CACPjB,OAAO,GACPM,YAAY,IAJP,E,iFAQO,IAAD,OACfqB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACpB,OAAO+B,S,+BAS9B,IAAD,OACEC,EAAab,KAAKF,MAAMjB,OAAOiC,QAAO,SAAAC,GACxC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKnB,MAAMX,YAAY6B,kBAEpE,OACI,yBAAK1C,UAAU,OACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUvB,OAAQgC,W,GA/BZK,IAAMhB,YCEJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAET,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDuH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e6249b5d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=(props)=>{\r\n    return(\r\n    \r\n        <div className='tc grow bg-light-green dib br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${props.id}?size=200x200`}  alt='robots'/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList=({robots})=>{\r\n    return(\r\n       <div>\r\n \r\n            {\r\n                robots.map((user,i)=>{\r\n        return (\r\n            <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            />\r\n                );\r\n                                    })\r\n            }\r\n            </div>\r\n\r\n\r\n    );\r\n}\r\nexport default  CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return(\r\n        <div className='pa2 '>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='Search Robots'\r\n        onChange={searchChange}\r\n        />\r\n        \r\n        </div>\r\n        );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowX:'scroll',border:'3px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooooops.That is not Good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js'\r\nimport '../containers/App.css'\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}));\r\n        \r\n        }\r\n\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n       \r\n    }\r\n    render(){\r\n        const filterRobots=this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc '>\r\n            <h1 className='f2'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filterRobots}/>\r\n            </ErrorBoundary>\r\n            \r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\n<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}